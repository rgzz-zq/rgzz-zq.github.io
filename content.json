{"meta":{"title":"Hexo","subtitle":"Share station","description":"Here, you will make progress together!","author":"rgzzplus","url":"https://www.rgzzplus.com","root":"/"},"pages":[{"title":"关于","date":"2022-03-19T15:37:13.720Z","updated":"2022-03-19T15:37:13.720Z","comments":true,"path":"about/index.html","permalink":"https://www.rgzzplus.com/about/index.html","excerpt":"","text":"一个平平无奇的在校大学牲，奋发努力的朝着网络安全大坑迈进。"},{"title":"404 Not Found：该页无法显示","date":"2022-03-11T07:26:02.826Z","updated":"2022-03-11T07:26:02.826Z","comments":false,"path":"/404.html","permalink":"https://www.rgzzplus.com/404.html","excerpt":"","text":""},{"title":"书单","date":"2022-03-11T07:26:02.829Z","updated":"2022-03-11T07:26:02.829Z","comments":false,"path":"books/index.html","permalink":"https://www.rgzzplus.com/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-03-16T06:34:32.173Z","updated":"2022-03-16T06:34:32.173Z","comments":true,"path":"links/index.html","permalink":"https://www.rgzzplus.com/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-03-11T07:26:02.830Z","updated":"2022-03-11T07:26:02.830Z","comments":false,"path":"categories/index.html","permalink":"https://www.rgzzplus.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-03-11T07:47:58.721Z","updated":"2022-03-11T07:26:02.832Z","comments":false,"path":"repository/index.html","permalink":"https://www.rgzzplus.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-03-11T07:26:02.833Z","updated":"2022-03-11T07:26:02.833Z","comments":false,"path":"tags/index.html","permalink":"https://www.rgzzplus.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"C和指针编程题--第四章","slug":"C和指针编程题-第四章","date":"2022-03-22T11:33:07.000Z","updated":"2022-03-22T11:57:53.935Z","comments":true,"path":"2022/03/22/C和指针编程题-第四章/","link":"","permalink":"https://www.rgzzplus.com/2022/03/22/C%E5%92%8C%E6%8C%87%E9%92%88%E7%BC%96%E7%A8%8B%E9%A2%98-%E7%AC%AC%E5%9B%9B%E7%AB%A0/","excerpt":"","text":"第四章 编程题4.14 题目1 123456789101112131415161718192021222324252627282930313233343536/** 编译环境：vs2022* 题目简介：用公式计算正数 numb 的平方根* 时间：2022/3/20* 总结：学会使用绝对值函数，整数下用abs()，浮点数下用fabs()*/#define _CRT_SECURE_NO_WARNINGS#include&lt;stdio.h&gt;#include&lt;math.h&gt;int main()&#123; /* * 公式对应值； * n = numb,numb_next = a_1, numb_dnext = a_2 */ double numb, numb_next, numb_dnext; numb = 3; numb_next = 1; numb_dnext = 3; /* * 1.最开始想将下面的if判断用作while循环条件， * 调试发现，numb_next后来一直等于numb_dnext。 * 2.近似值判定条件，即程序停止判定条件， * 用相邻两数相减区绝对值，然后域精确度比较。 */ while (1) &#123; numb_dnext = (numb_next + numb / numb_next) / 2; if (fabs(numb_dnext - numb_next) &lt; 0.00001) break; numb_next = numb_dnext; &#125; printf(&quot;%f&quot;, numb_dnext); return 0;&#125; 题目2 1234567891011121314151617181920212223242526272829303132/** 编译环境：vs2022* 题目简介：打印1~100间质数* 时间：2022/3/20* 总结：这里也可以把内层循环做成函数，放在外面，提高阅读性* 改进：可以将内层循环改为 for(i = (int)sqrt(n); i &gt; 1; i--)* 使得减小其循环次数*/#define _CRT_SECURE_NO_WARNINGS#include&lt;stdio.h&gt;#include&lt;math.h&gt;int main()&#123; int i = 1, n = 0; /* * 1.外层循环取出1~100间所有的整数给n * 2.内层循环判断出n是否是质数 */ for( n = 1; n &lt;= 100; n++) &#123; for( i = n/2; i &gt; 1; i--) &#123; if( (n % i) == 0) break; &#125; if (i == 1) printf(&quot;%d\\n&quot;,n); &#125; return 0; &#125; 题目三 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/** 编译环境：vs2022* 题目简介：判断三角形类型* 时间：2022/3/20* 分析：1.首先要确定其是一个三角形：任意两边之和大于第三边* 2.再判断三角形类型：直角（勾股定理），等边，等腰* 总结：复制完交换代码，不要忘记更改参数* 改进：将交换单独设置为函数，提高代码可读性* 用while循环使得用户输入失败时，重新输入* 作者：人工智障plus */#define _CRT_SECURE_NO_WARNINGS#include&lt;stdio.h&gt;#include&lt;math.h&gt;int main()&#123; int a,b,c=0; int temp = 0; printf(&quot;请输入三角形三边长度：&quot;); scanf(&quot;%d&quot;,&amp;a); scanf(&quot;%d&quot;,&amp;b); scanf(&quot;%d&quot;,&amp;c); /* * 先判断是不是三角形， * 分解：找出两条小边，再与长边比较 * 或者先找最大边 */ if(a &lt; b) &#123; temp = a; a = b; b = temp; &#125; if(a &lt; c) &#123; temp = a; a = c; c = temp; &#125; if((b+c) &lt; a) &#123; printf(&quot;您输入的数据不能构成一个三角形\\n&quot;); return 0; &#125; /* * 判断三角形类型 */ if( (a==b)&amp;&amp;(b==c) ) &#123; printf(&quot;此三角形是等边三角形\\n&quot;); return 0; &#125; if( (a==b)||(b==c)||(a==c) ) &#123; printf(&quot;此三角形是等腰三角形\\n&quot;); return 0; &#125; if( (a^2)==((b^2)+(c^2)) ) &#123; printf(&quot;此三角形是直角三角形\\n&quot;); return 0; &#125; printf(&quot;此三角形是普通三角形\\n&quot;); return 0;&#125; 题目四 123456789101112131415161718192021222324252627282930313233343536373839404142434445/** 编译环境：vs2022* 题目简介：复制字符串数组到另一个数组，并且正好复制n个* 时间：2022/3/21* 分析：因为始终要控制其长度为n，所以外层循环控制长度，* 循环体内控制复制字符* 总结：了解到一种计算字符数组长度的方法：length=sizeof(a)/sizeof(a[0]);* 改进：增加检查数组长度，以确定传值是否合法* 作者：人工智障plus */#define _CRT_SECURE_NO_WARNINGS#include&lt;stdio.h&gt;#include&lt;math.h&gt;void copy_n( char dst[], char src[], int n);int main()&#123; char a[5]=&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;&#125;; char b[5]; copy_n(b,a,2); for(int i=0; i&lt;2; i++) printf(&quot;%c&quot;,b[i]); return 0;&#125;/** 确定 src[] 的长度* 1.计算数组长度，失败，sizeof不能在传递参数名的函数内来获取长度* 2.在最后检验字符串结束标志*/void copy_n( char dst[], char src[], int n)&#123; int i; for(i=0; i&lt;n; i++) &#123; if( src[i] != &#x27;\\0&#x27; ) dst[i] = src[i]; else dst[i] = &#x27;\\0&#x27;; &#125;&#125; 题目五 1234567891011121314151617181920212223242526272829303132333435/** 编译环境：vs2022* 题目简介：读取文件文本内容并打印* 时间：2022/3/20* 分析：题目提示已经分析* 总结：strcmp()比较两个字符串，* 两者相等返回0，不相等返回非0值* 改进：可以将输出结果放在一个文件里* 作者：人工智障plus*/#define _CRT_SECURE_NO_WARNINGS#include&lt;stdio.h&gt;#include&lt;string.h&gt;int main()&#123; /* * 设置缓冲区，复制区 */ char buffer[128] = &#123;&#125;; char array[128] = &#123;&#125;; while(1) &#123; gets(buffer); if(!strcmp(array,buffer)) &#123; printf(&quot;%s\\n&quot;,array); &#125; strcpy(array,buffer); &#125; return 0;&#125; 题目六 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/** 编译环境：vs2022* 题目简介：提取子字符串* 时间：2022/3/20* 分析：题目提示已经分析* 总结：* 改进：增加判定函数是否执行，反馈输出提示* 作者：人工智障plus*/#define _CRT_SECURE_NO_WARNINGS#include&lt;stdio.h&gt;#include&lt;string.h&gt;int substr( char dst[], char src[], int start, int len);int main(int argc, char *argv[])&#123; char dst[10]; char src[10] = &quot;sbsbdsb&quot;; substr(dst,src,1,2); printf(&quot;%s\\n&quot;,dst); return 0;&#125;int substr( char dst[], char src[], int start, int len)&#123; /*start或len为负数*/ if( (start&lt;0)||(len&lt;0) ) return 0; /*指定位置超过src数组尾部*/ int i = 0; while( src[i] != &#x27;\\0&#x27; ) i++; if( start&gt;i ) return 0; /*提取字符串*/ for(i=0; i&lt;len; i++) &#123; dst[i] = src[start+i]; &#125; return 1;&#125; 题目七 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354/** 编译环境：vs2022* 题目简介：去除空格* 时间：2022/3/20* 分析：见注释* 总结：传数组名，相当于传指针，能通过函数修改实参* 改进：增加判定函数是否执行，反馈输出提示，让用户自己输入数据* 作者：人工智障plus*/#define _CRT_SECURE_NO_WARNINGS#include&lt;stdio.h&gt;#include&lt;string.h&gt;void deblank(char string[]);int main(int argc, char* argv[])&#123; char string[10] = &quot;s bb &quot;; deblank(string); printf(&quot;%s&quot;, string); return 0;&#125;void deblank(char string[])&#123; int i = 0; /* * 外层循环遍历数组， * 通过判断当前和下一字符是否为空格， * 来决定是否删除后一空格 */ while (string[i] != &#x27;\\0&#x27;) &#123; if ((string[i] == &#x27; &#x27;) &amp;&amp; (string[i + 1] == &#x27; &#x27;)) &#123; int j = i; /* * 删除实现：将第一个空格后面所有的字符向前挪动一位 * 这里有个坑：当有三个连续空格时，如果不将i自减一位， * 最后输出还是有两个连续的空格， * 原因：忽略了第一次判断的空格。 */ while (string[j] != &#x27;\\0&#x27;) &#123; string[j] = string[j + 1]; j++; &#125; i--; &#125; i++; &#125;&#125;","categories":[{"name":"题库/作业","slug":"题库-作业","permalink":"https://www.rgzzplus.com/categories/%E9%A2%98%E5%BA%93-%E4%BD%9C%E4%B8%9A/"}],"tags":[{"name":"C和指针","slug":"C和指针","permalink":"https://www.rgzzplus.com/tags/C%E5%92%8C%E6%8C%87%E9%92%88/"}]},{"title":"Git快速入门","slug":"Git快速入门","date":"2022-03-19T13:12:59.000Z","updated":"2022-03-19T13:27:48.461Z","comments":true,"path":"2022/03/19/Git快速入门/","link":"","permalink":"https://www.rgzzplus.com/2022/03/19/Git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/","excerpt":"","text":"阅前提示：本文来自小甲鱼的极客Python之Git实用教程总结，完全是我自己记得笔记，在这里分享给大家，如有不足和错误，请在评论区告诉我 Git 记录的是什么？ Git 是将每个版本独立保存 工作区域、暂存区域和 Git 仓库 ​ 工作区（WORKING DIRECTORY）: 直接编辑文件的地方，肉眼可见直接操作； 暂存区（STAGIN AREA）：数据（快照）暂时存放的地方； **版本库（GIT DIRECTORT(RESPOSITORY)）：**存放已经提交的数据，push 的时候，就是把这个区的数据 push 到远程git仓库了。 Git 工作流程 Git的工作流程一般是酱紫: 在工作目录中添加、修改文件 将需要进行版本管理的文件放入暂存区域 将暂存区域的文件提交到Git仓库 Git管理的文件有三种状态: 已修改(modified) 已暂存(staged) 已提交(committed) 实战 将工作目录的文件放到Git仓库只需要两步: git add 文件名 //添加文件 git commit -m &quot;你干了啥” //提交并注释 其它命令 git status //查看状态 git log //查看历史提交的最终版本，即 commit实体 reset //撤回提交，即将最后一次存放到Git仓库里的文件撤回到暂存区 checkout //从历史快照（或者暂存区域）中拷贝文件到工作目录 几个命令的功能 add 用于把工作目录的文件放入暂存区域 commit 用于把暂存区域的文件提交到 Git 仓库 reset 用于把 Git 仓库的文件还原到暂存区域 checkout 用于把暂存区域的文件还原到工作目录 reset 命令选项（危险） git reset --mixed HEAD～ 移动 HEAD 的指向,将其指向上一个快照 将 HEAD 移动后指向的快照回滚到暂存区域 git reset --soft HEAD～ 移动 HEAD 的指向,将其指向上一个快照 git reset --hard HEAD~ 移动 HEAD 的指向,将其指向上一个快照 将 HEAD 移动后指向的快照回滚到暂存区域 将暂存区域的文件还原到工作目录 reset 命令回滚快照三部曲 移动 HEAD 的指向(–soft) 将快照回滚到暂存区域([–mixed]，默认) 将暂存区域还原到工作目录（–hard) 回滚个别文件 git reset 版本快照 文件名/路径 HEAD 指针不会移动，回滚 git reset 版本快照的 ID 号 前滚 比较 比较暂存区域与工作目录 git diff //比较差异 第二行 比较暂存区域和工作目录下的 README.md a 代表暂存区域下的文件夹 b 代表工作区域下的文件夹 第三行 1a5af1f…20f3146 表示文件ID， 100644 指定文件类型和权限 第四行 — 三个减号，表示是旧文件存放在暂存区域 第五行 +++ 三个加号，表示是新文件存放在工作目录 第六行 中间的减号（-）代表旧文件，后面紧接着的数字代表开始行号，逗号后面的数字代表持续的行数 第七行 减号后面，代表删减的内容 第八行 加号后面，代表增加的内容 第九行 两个版本共有的内容 如果后面有冒号（：）代表文件内容未完全显示，需要输入命令查看或退出 常用命令 j 向下移动一行 f 向下移动一页 b 向上移动一页 d 向下移动半页 u 向上移动半页 g 跳到第一行 G 跳到最后一行 3g 跳到第3行 / 从上往下搜索 ? 从下往上搜索 /+搜索内容 按内容查找 h 显示帮助文档 q 退出 比较当前工作目录和 Git 仓库中的快照 git diff 快照ID 比较暂存区与 Git 仓库中的快照 git diff --cached 快照ID 终极奥义图 修改最后一次提交 在实际开发中,你可能会遇到以下两种情景: 情景一:版本刚一提交(commit）到仓库，突然想起漏掉两个文件还没有添加( add ) 。 情景二:版本刚一提交( commit）到仓库，突然想起版本说明写得不够全面，无法彰显你本次修改的重大意义… 执行带 – amend 选项的 commit 提交命令, Git 就会 “更正” 最近的一次提交 git commit --amend 删除文件后恢复 git checkout --文件名 恢复已删除的文件 删除文件 git rm 文件名 删除工作区域和暂存区域的文件，也就是取消跟踪，不纳入下一个版本管理，但不能删除已经提交在 git 仓库里的文件 git rm -f 文件名 强制删除工作区域和暂存区域所有【文件名】文件，在工作目录和暂存区的同一个文件不同内容时使用 git rm --cached 文件名 只删除暂存区的文件 git reset --soft HEAD~ soft 修改指针 重命名文件 git mv 旧文件名 新文件名 ren/mv 旧文件名 新文件名 git rm 旧文件名 git add 新文件名 Git 分支 创建分支 git branch 分支名 切换分支前 切换分支 git checkout 分支名 切换到feature分支后 向 feature 分支添加内容后 向 master 添加新内容后 git log --oneline --graph --all 以图形化显示所有分支 合并和删除分支 实际开发中的分支 合并分支 git merge 分支名 删除分支 git branch -d 分支名 git branch --delete 分支名 匿名分支 checkout 命令 功能 从历史快照（或者暂存区域）中拷贝文件到工作目录 git checkout – README.md 加（–）是预防你恰好有一个 README.md 的分支，产生矛盾 切换分支 checkout 命令与 reset 命令区别 恢复文件 checkout 命令和 reset 命令都可以用于恢复指定快照的指定文件，并且它们都不会改变 HEAD 指针的指向。 下面开始划重点∶ 它们的区别是 reset 命令只将指定文件恢复到暂存区域（–mixed ），而 checkout 命令是同时覆盖暂存区域和工作目录。 注意∶也许你试图使用 git reset --hard HEAD~README.md 命令让 reset 同时覆盖工作目录，但 Git 会告诉你这是徒劳（此时 reset 不允许使用 --soft 或 --hard 选项)。 这样看来，在恢复文件方面，reset 命令要比 checkout 命令更安全一些。 恢复快照 reset 命令是用来 “ 回到过去 ” 的，根据选项的不同，reset命令将移动 HEAD 指针 ( --soft ) -&gt; 覆盖暂存区域 ( --mixed，默认 ) -&gt; 覆盖工作目录 ( --hard )。 checkout 命令虽说是用于切换分支，但前面你也看到了，它事实上也是通过移动 HEAD 指针和覆盖暂存区域、工作目录来实现的。 那问题来了:它们有什么区别呢? 下面开始划重点∶ 第一个区别是，对于 reset --hard 命令来说，checkout 命令更安全。因为 checkout 命令在切换分支前会先检查一下当前的工作状态，如果不是 “clean” 的话，Git 不会允许你这样做；而 reset --hard 命令则是直接覆盖所有数据。 另一个区别是如何更新 HEAD 指向，reset 命令会移动 HEAD 所在分支的指向，而 checkout 命令只会移动 HEAD 自身来指向另一个分支。","categories":[{"name":"工具","slug":"工具","permalink":"https://www.rgzzplus.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://www.rgzzplus.com/tags/Git/"}]},{"title":"Ollydebug快捷键","slug":"Ollydebug快捷键","date":"2022-03-19T13:11:02.000Z","updated":"2022-03-19T13:12:27.305Z","comments":true,"path":"2022/03/19/Ollydebug快捷键/","link":"","permalink":"https://www.rgzzplus.com/2022/03/19/Ollydebug%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"","text":"按键 说明 F2 下断点，也就是指定端点的地址 F3 加载一个可执行程序，进行调试分析 F4 程序执行到光标处 F5 缩小、还原当前窗口 F7 单步步入 F8 单步步过 F9 直接运行程序，遇到断点处，程序暂停 Ctrl+F2 重新运行程序到起始处，一般用于重新调试程序 Ctrl+F9 执行到函数返回处，用于跳出函数实现 Alt+F9 执行到用户代码处，用于快速跳出系统函数 Ctrl+G 输入十六进制地址，快速定位到该地址处","categories":[{"name":"工具","slug":"工具","permalink":"https://www.rgzzplus.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"ollydebug","slug":"ollydebug","permalink":"https://www.rgzzplus.com/tags/ollydebug/"}]},{"title":"task_struct","slug":"task-struct","date":"2022-03-19T12:46:50.000Z","updated":"2022-03-19T13:27:38.600Z","comments":true,"path":"2022/03/19/task-struct/","link":"","permalink":"https://www.rgzzplus.com/2022/03/19/task-struct/","excerpt":"","text":"阅前提示：本文来自《LINUX内核设计与实现》第三章内容总结，如有不足和错误，请在评论区告诉我 task_struct结构体 task_struct 被称为进程描述符，它定义在&lt;linux/sched.h&gt;文件中，进程描述符中包含一个具体进程的所有信息。 进程描述符中包含的数据能完整的描述一个正在执行的程序：程序打开的文件，进程的地址空间，挂起的信号，进程的状态，等等 分配进程描述符 Linux通过slab分配器分配 stak_struct 结构，目的是为了达到对象复用和缓存着色（注：通过预先分配和重复使用 task_struct，可以避免动态分配和释放所带来的资源消耗）。每个进程的 task_struct 存放在它们内核栈的栈尾。 slab分配器在栈底（对于向下增长的栈来说）或栈顶（对于向上增长的栈来说）创建一个新的结构 struct thread_info，此结构中的 task域中存放指向该任务实际 task_struct的指针，以方便在汇编代码中计算其偏移。 进程描述符的存放 内核通过一个唯一的进程标识符（process identification value）或 PID 来表示每个进程。PID是一个最大默认值为 32768 的 int型数。它被存放在各自的进程描述符中。 进程状态 进程描述符中的 state域描述了进程的当前状态，该域的值： 状态标志（域值） 说明 TASK_RUNNING 运行，表示进程是可执行的；它或者正在执行，或者在运行队列中等待执行 TASK_INTERRUPTIBLE 可中断，进程被阻塞，等待某些条件达成，一旦条件满足，进程就被唤醒，切换为运行状态 TASK_UNINTERRUPTIBLE 不可中断，进程不会因为接收到信号而被唤醒切换为运行 TASK_ZOMBIE 僵死，该进程已经结束了，但其父进程还没有释放其所获得的资源 TASK_STOPPED 停止，进程没有投入运行，也不能投入运行","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://www.rgzzplus.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"task_struct","slug":"task-struct","permalink":"https://www.rgzzplus.com/tags/task-struct/"}]},{"title":"免费建站","slug":"免费建站","date":"2022-03-17T12:48:04.000Z","updated":"2022-03-18T01:47:56.275Z","comments":true,"path":"2022/03/17/免费建站/","link":"","permalink":"https://www.rgzzplus.com/2022/03/17/%E5%85%8D%E8%B4%B9%E5%BB%BA%E7%AB%99/","excerpt":"","text":"免费建站 注册 Github 账号，并创建仓库 创建仓库(仓库名格式：账户名.github.io) https://blog.csdn.net/weixin_43729943/article/details/103915046 添加ssh https://blog.csdn.net/u013778905/article/details/83501204 本地nodejs，Git环境搭建 教程 https://hexoscript.gitbook.io/hexo-script/v/1.3-1/shi-yong-bu-zhou/zhun-bei-gong-ju 利用hexo搭建博客 教程 https://hexoscript.gitbook.io/hexo-script/v/1.3-1/shi-yong-bu-zhou/yi-jian-an-zhuang-hexo-bo-ke 官方文档 https://hexo.io/zh-cn/docs/ 主题 挑选主题 https://hexo.io/themes/ 配置主题 自行阅读主题文件夹下的 README.md文件 百度收录 https://zhuanlan.zhihu.com/p/100922816 最后 在此附上B站大佬的建站视频教程：https://www.bilibili.com/video/BV1mU4y1j72n","categories":[{"name":"经验交流","slug":"经验交流","permalink":"https://www.rgzzplus.com/categories/%E7%BB%8F%E9%AA%8C%E4%BA%A4%E6%B5%81/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.rgzzplus.com/tags/hexo/"},{"name":"建站","slug":"建站","permalink":"https://www.rgzzplus.com/tags/%E5%BB%BA%E7%AB%99/"}]},{"title":"linux指令","slug":"linux指令","date":"2022-03-15T10:02:50.000Z","updated":"2022-03-15T10:21:04.675Z","comments":true,"path":"2022/03/15/linux指令/","link":"","permalink":"https://www.rgzzplus.com/2022/03/15/linux%E6%8C%87%E4%BB%A4/","excerpt":"","text":"Linux 命令 名字 语法 用法 全称或备注 . 当前目录 … 上级目录 ~ 用户主目录 普通用户的主目录为/home；超级用户的主目录为/root - 前一个工作目录 / 表示根目录 cd cd [相对路径或绝对路径] 切换到目标工作目录 change directory pwd pwd 查看或打印当前目录 print working directory type type [命令名] 用来显示指定命令类型 ls ls 显示当前目录下的文件 ll ll 显示当前目录下文件详细信息 ls -l --color=auto ll -a ll -a 显示当前目录下文件及隐藏文件详细信息 mkdir mkdir -p a/b/c/d/e/f 会自动创建文件父目录mkdir -p lucky/{1234}ls 一次可以创建多个子目录 创建文件目录 make directory rm rm -rf [目录名] 删除文件夹，强制删除 remove rmdir rmdir [目录名] 删除文件目录，要求该文件夹是空文件夹 remove directory cp cp [选项] 源路径 存放路径cp 源路径 存放路径 拷贝文件到文件夹，复制 copy * shiren* 所有以’shiren’开头的文件夹 mv mv 源路径 存放路径 1、移动文件到文件夹，剪切2、修改文件名字 move touch touch 文件名 如果没有该文件，则创建新文件；如果有该文件，则修改该文件的三个时间 stat 文件属性 state cat cat 文件名 正序查看文件内容 tac tac 文件名 倒序查看文件内容 more more 文件名 分页查看文件内容 敲回车，一行行显示后续内容；敲 ‘b’ 返回上一行；敲空格，一页页显示后续内容；敲 ‘h’ 显示帮助，更多指令 less less 文件名 与more功能基本一样，区别是less的操作命令更多 head head -10 文件名 查看文件前10行 tail tail -10 文件名tail -f 文件名tail -F文件名 查看文件后10行监控文件变化，按Inode查找监控文件变化，按文件名查找 | 竖杠 head -8 文件名 | tail -1 ‘|’ 将前面查询结果传递给后面，只查询第8行 find find / -name 文件名 在 / 内查找叫[文件名]的文件 echo ln ln -s 目标文件名 链接文件名 |创建软链接，类似指针ln 目标文件名 链接文件名 |创建硬链接，类似取别名 创建文件链接 ip addr ip addr ip查询 终端相关 快捷键 Ctrl+Alt+T：桌面打开终端 exit 或 快捷键 Ctrl+D：结束终端会话 时间相关 date：显示当前时间和日期 cal：默认显示当前月份的日历 磁盘相关 df：查看磁盘的当前可用空间 free：查看内存容量 文件相关 pwd：输出当前的工作目录名称，【print working directory】 ls：列出目录内容 cd：修改目录 tips： 焦点跟随鼠标 $ 代表普通用户； # 代表超级用户 linux命令 ll信息详解 参考文章 第一列：文件类型 ‘-’ 普通文件 ‘d’ 文件夹、目录 ‘l’ 链接文件，类似于windows的快捷方式 ‘p’ 管理文件 ‘b’ 块设备文件 ‘c’ 字符设备文件 ‘s’ 套接字文件 后列：文件属性 r（Read，读取权限）：对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目录的权限。 w（Write，写入权限）：对文件而言，具有新增、修改文件内容的权限；对目录来说，具有删除、移动目录内文件的权限。 x（execute，执行权限）：对文件而言，具有执行文件的权限；对目录来说，该用户具有进入目录的权限。 另外，这里还有2个很特殊的属性，平时不怎么常见，这里也顺带解释一下： s或S（SUID,Set UID）：可执行的文件搭配这个权限，便能得到特权，任意存取该文件的所有者能使用的全部系统资源。请注意具备SUID权限的文件，黑客经常利用这种权限，以SUID配上root帐号拥有者，无声无息地在系统中开扇后门，供日后进出使用。 t或T（Sticky）：/tmp和 /var/tmp目录供所有用户暂时存取文件，亦即每位用户皆拥有完整的权限进入该目录，去浏览、删除和移动文件。 综合起来可得，对于back_init文件，其创建者/所有者具有可读可写可执行的权限，其创建者/所有者所在的组的其他用户具有可读可写可执行的权限，其他组的其他用户则具有可读可执行但不可写的权限。 type详解 参考文章 一般情况下，type命令被用于判断另外一个命令是否是内置命令，但是它实际上有更多的用法。 判断一个名字当前是否是alias、keyword、function、builtin、file或者什么都不是： type ls 的输出是 ls 是 ‘ls --color=auto’ 的别名 type if 的输出是 if 是 shell 关键字 type type 的输出是 type 是 shell 内嵌 type frydsh 的输出是 bash: type: frydsh: 未找到 判断一个名字当前是否是alias、keyword、function、builtin、file或者什么都不是的另一种方法（适用于脚本编程）： type -t ls 的输出是 alias type -t if 的输出是 keyword type -t type 的输出是 builtin type -t gedit 的输出是 file type -t frydsh 没有输出 显示一个名字的所有可能： type -a kill 的输出是 kill 是 shell 内嵌 和 kill 是 /bin/kill type -at kill 的输出是 builtin 和 file 查看一个命令的执行路径（如果它是外部命令的话）： type -p gedit 的输出是 /usr/bin/gedit type -p kill 没有输出（因为kill是内置命令） 强制搜索外部命令： type -P kill 的输出是 /bin/kill cp命令相关选项 参考文章 cp命令的各选项含义如下： - a 该选项通常在拷贝目录时使用。它保留链接、文件属性，并递归地拷贝目录，其作用等于dpR选项的组合。 - d 拷贝时保留链接。 - f 删除已经存在的目标文件而不提示。 - i 和f选项相反，在覆盖目标文件之前将给出提示要求用户确认。回答y时目标文件将被覆盖，是交互式拷贝。 - p 此时cp除复制源文件的内容外，还将把其修改时间和访问权限也复制到新文件中。 - r 若给出的源文件是一目录文件，此时cp将递归复制该目录下所有的子目录和文件。此时目标文件必须为一个目录名。 - l 不作拷贝，只是链接文件。 需要说明的是，为防止用户在不经意的情况下用cp命令破坏另一个文件，如用户指定的目标文件名已存在，用cp命令拷贝文件后，这个文件就会被新源文件覆盖，因此，建议用户在使用cp命令拷贝文件时，最好使用i选项。 例子： Cp -i file1 file2 (将文档 file1 复制成 file2 . –i为提示确认。) cp file1 dir1 将文档 file1 复制到目录 dir1 下，文件名仍为 file1. cp /tmp/file1 . 将目录 /tmp 下的文档 file1复制到现行目录下，档名仍为 file1. cp /tmp/file1 file2 将目录 /tmp 下的文档 file1现行目录下，档名为file2 cp -r dir1 dir2 (recursive copy) 复制整个目录.若目录 dir2 不存在，则将目录dir1，及其所有文档和子目录，复制到目录 dir2 下，新目录名称为dir1.若目录dir2不存在，则将dir1，及其所有文档和子目录，复制为目录 dir2. stat 文件属性详解 File：文件名 Size：大小 Blocks：块 IO Block：分配（一般为 4k=4096 ） Device：存放在硬盘区位置 Inode：文件绝对位置 Links：静态硬连接数量 Access：文件权限 Uid：所属用户 Gid：所属组 Access：访问文件时间 Modify：文件内容发生变化时间 Change：文件权限改变时间 ln 创建文件详解 ln -s 目标文件名 链接文件名 |创建软链接，形式是 ‘l’ 链接，链接文件 Inode 属性不同，类似于指针ln 目标文件名 链接文件名 |创建硬链接，形式是 ‘-’ 文件，链接文件 Inode 属性相同，类似于别名 VI 和 VIM 编辑器","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://www.rgzzplus.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://www.rgzzplus.com/tags/Linux/"}]},{"title":"如何校外访问知网？","slug":"校外访问登录知网","date":"2022-03-14T05:08:53.000Z","updated":"2022-03-15T13:17:23.765Z","comments":true,"path":"2022/03/14/校外访问登录知网/","link":"","permalink":"https://www.rgzzplus.com/2022/03/14/%E6%A0%A1%E5%A4%96%E8%AE%BF%E9%97%AE%E7%99%BB%E5%BD%95%E7%9F%A5%E7%BD%91/","excerpt":"","text":"知网困境 中国大学生苦知网久矣，众所周知，大学毕业要求要写论文。那么，查资料就是必不可少的一环，而中国知网，下载或阅读一篇论文，收费2元+。一篇还好，关键是，你写论文肯定就不会只参考一篇文章吧，多起来你可能要阅读100+篇才写的下来，那这些费用学生只能勉强负担。 其实，学校一般都会购买知网的版权，以供学生免费阅读下载知网的论文期刊。下面我先讲讲校园网登录知网吧。 校园网IP 登录知网 一般都在知网登录界面，有一个IP登录，如下图所示 如果你没有连接校园网，就无法使用这里的 IP登录。 但是，这种方式一般都有一个硬性条件，你必须要能够连接到校园网。由于校园网无法完全覆盖学校，比如我们宿舍就连不上校园网，而且我们用的宽带是电信宽带（一般校园网宽带都很慢），所以就无法使用校园网提供的 IP登录知网。而且写论文的主力军 — 大四，通常在最后几个学期就在校外实习，很少有时间回学校，更需要访问知网。 以下为本文重点！！ 所以这个时候就要用到远程访问技术来接入到学校内网。一般学校的官网就会提供远程访问的方法，但据我所知，很多学生都不知道。所以接下来我来向大家介绍如何远程访问内网资源（主要是上知网）。 登录学校官网 先进入学校官网：武汉轻工大学 以学生身份登入学生管理系统 找到VPNWeb资源 然后往下滑动，在应用中心找到VPNWeb资源，进入 阅读VPN客户端使用说明及下载 在VPN客户端使用说明及下载中一般都会介绍如何使用VPN客户端 下载VPN客户端 下载VPN客户端有两种方式 第一种方法，直接将VPN客户端使用说明及下载翻到文末，有一个附件可以下载 第二种方法，返回信息门户，找到VPN客户端下载，点击跳转后，找到下载查看就行 解压到本地并安装 解压压缩包 打开解压位置，找到EasyConnectInstaller.exe 双击它，然后你可能跟我一样会弹出提示，选择是 然后就进行安装过程了 配置软件 然后在桌面会找到EasyConnectInstaller的图标，双击进入 然后再服务地址内输入：https://vpn.whpu.edu.cn，选择连接 等待它下载并安装组件 组件安装完成后，就会弹出下图，选择同意 然后单击图示图标 用户名为统一身份认证账号密码，就是你登录学生管理系统的账号密码（注：记得勾选记住密码，以便下次访问） 登录后在软件主页面找到中国知网访问，安全提示选择是，就会通过默认浏览器进入知网了 验证能否免费使用知网 然后我们在知网页面随便搜索点东西 跳转后我们可以看到，我们已经以学校登录了，现在我们就能随便阅读下载知网论文了 其它 其它学校也大同小异，只要能在学生管理系统中找到VPN字样就也能看到教程和软件资源下载。最后，祝大家生活快乐！","categories":[{"name":"经验交流","slug":"经验交流","permalink":"https://www.rgzzplus.com/categories/%E7%BB%8F%E9%AA%8C%E4%BA%A4%E6%B5%81/"}],"tags":[{"name":"中国知网","slug":"中国知网","permalink":"https://www.rgzzplus.com/tags/%E4%B8%AD%E5%9B%BD%E7%9F%A5%E7%BD%91/"}]},{"title":"hexo写作","slug":"hexo写作","date":"2022-03-13T10:09:13.000Z","updated":"2022-03-13T14:22:08.821Z","comments":true,"path":"2022/03/13/hexo写作/","link":"","permalink":"https://www.rgzzplus.com/2022/03/13/hexo%E5%86%99%E4%BD%9C/","excerpt":"","text":"创建新文章 在命令行中输入： 1hexo new [layout] &lt;title&gt; 如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。（默认在博客文件夹下的source文件夹）如果标题包含空格的话，请使用引号括起来。 参数 描述 -p, --path 自定义新文章的路径 -r, --replace 如果存在同名文章，将其替换 -s, --slug 文章的 Slug，作为新文章的文件名和发布后的 URL 创建草稿 在命令行中输入： 1hexo new draft &lt;title&gt; 如果你从未使用过草稿功能，这条指令会自动在博客文件夹下的source文件夹内创建一个_draft文件夹，以后你创建的草稿都会被保存到这个文件夹下。同时这条指令也是创建草稿的命令。title标题如果有空格也是要用引号括起来的。 然后你就可以到_draft文件里用编辑器编辑文件。 发表草稿 在命令行中输入： 1hexo publish [layout] &lt;filename&gt; 在编辑完文件后，就要发表文章，就是把草稿变成新文章，实际上是将草稿文件从source/_draft移动到source/_posts。layout默认就是source/_posts，filename是你要发表的文件名。如果你是按照上面创建的草稿，那filename就是title。 预览文章 在命令行中输入： 12hexo ghexo s hexo g是hexo generate的缩写，生成静态文件。 hexo s是hexo server的缩写，启动服务器。默认情况下，访问网址为： http://localhost:4000/ 在将文章上传到网站前，我们要想预览一下效果，看看文章在网站上好不好看，排版是否清晰，就输入上面两条指令先进行本地渲染。然后再浏览器中输入上面的网址，就能访问本地服务器来预览网站了。 发表文章 在命令行中输入： 12hexo ghexo d hexo d是hexo deploy的缩写，部署网站，即把文章上传到网站中。 参考链接 hexo官方文档","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://www.rgzzplus.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.rgzzplus.com/tags/hexo/"}]},{"title":"Linux二级目录","slug":"linux二级目录","date":"2022-03-13T09:37:43.000Z","updated":"2022-03-13T09:49:08.227Z","comments":true,"path":"2022/03/13/linux二级目录/","link":"","permalink":"https://www.rgzzplus.com/2022/03/13/linux%E4%BA%8C%E7%BA%A7%E7%9B%AE%E5%BD%95/","excerpt":"","text":"Linux二级目录 /bin 存放二进制可执行文件，‘binary’ 二进制 /sbin 存放超级管理员可执行的一些权限和命令，‘system binary’ /boot 存放Linux系统启动的文件，启动配置以及内核的镜像 ‘boot’ 引导 /dev 存放系统下的所有设备文件，‘device’ 设备 /etc 存放系统配置文件，意思是等等，etc来源见文末 /home 普通用户家目录 类似 windows 的 c:user 目录 /lib 存放系统使用函数库的目录，‘library’ 图书馆，库 /media 软盘或者光盘等的挂载点，‘media’ 媒体，介质 /mnt 硬盘默认挂载目录，‘mount’ 嵌入 /opt 自定义(第三方)软件安装位置，‘optional’ 可选择 /proc 一个虚拟的文件系统(只存在内存中，不是实际贮存在磁盘上的)，包括被某些程序使用的系统信息，‘process’ 进程 /root 超级用户家目录，‘root’ 根,(注:它不是系统的根&quot;/&quot; ) /run 运行时的一些临时文件，‘run’ 运行 /srv 存放服务启动后所需数据，‘service’ 服务 /sys 存放系统内核信息文件，‘system’ 系统 /tmp 系统临时文件目录，重启清除，‘temporary’ 临时的 /usr 操作系统软件资源所放置的目录，即系统默认软件放置位置，‘Unix Software Resource’ /var 系统产生经常变化的文件目录，‘variable’ 可变的 “etc来源”: etc不是什么缩写，是and so on的意思，来源于法语的 et cetera 翻译成中文就是 等等 的意思. 至于为什么在/etc下面存放配置文件， 按照原始的UNIX的说法 ( Linux文件结构参考UNIX的教学实现MINIX ) 这下面放的都是一堆零零碎碎的东西, 就叫etc, 这其实是个历史遗留.这个是来源于拉丁语全称etcetera. n.等等之人（或物），附加的人（或物）；加s：附加（或额外）的项目；零星杂物。或者分开的et cetera, adv. 等等，以及其他等等（略作etc.或＆c.）但得注意，人名后不宜用，要用and others。这个目录在LINUX里很重要哦，里面装的都是些杂七杂八的配置文件。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://www.rgzzplus.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://www.rgzzplus.com/tags/Linux/"}]},{"title":"起源","slug":"hello-world","date":"2022-03-11T05:26:57.197Z","updated":"2022-03-11T11:16:41.224Z","comments":true,"path":"2022/03/11/hello-world/","link":"","permalink":"https://www.rgzzplus.com/2022/03/11/hello-world/","excerpt":"","text":"Welcome to my Blog. 我是人工智障，关于博客，早在高中，我就有要做一个属于我自己的博客的想法。只不过那时迫于学业压力，我一直把这个想法埋藏在心底。后来，我也尝试过，限于能力和方法，始终没能做出东西。 后来我终于找到了正确的建站方法，使用 hexo + github 的方法终于把博客给搭建了起来。当然，也只是成功搭建了起来，由于不熟悉 hexo和 github 我也走了不少弯路，配置和文件管理一片混乱，使得我不得不删库重建。前前后后一共建了 6 个本地库和 2 个远程库，中间也熬了一周的夜，反复琢磨。有时上课也不得闲，都想着怎么消除 Bug。 自己独立搭建博客，还是很痛苦的，出了 Bug ，没人指导，即使你看不懂，你还是要硬着头皮上，熬夜修 Bug 那是常态。有时，碰上一些实在无法解决的 Bug ，你就不得不从头开始 （搭建博客时，Git用的很烂）。 经验与教训 下面是我搭建博客总结的一些经验： 一定要单步调试，一定要单步调试，一定要单步调试，重要的话说 3 遍，单步调试，能很轻易的让你发现错误源头，解决起来也很方便。 看官方文档，就拿 hexo 举例吧，最开始我是看 CSDN 上别人的博文使用 hexo 的，但是那些博文质量参差不齐，大多数都是基于官方文档总结的，有的甚至有错误，我就是踩了坑，才删了那么多库。 使用别人的主题一定要看 README.md 文件，这里面基本涵盖了如何安装和使用的详细步骤，至于为什么不看别人的总结，理由同上第二条。 最后，耐心，耐心，再耐心，仔细，仔细，再仔细。 如果你们对搭建博客感兴趣，就在留言区告诉我吧！","categories":[{"name":"个人","slug":"个人","permalink":"https://www.rgzzplus.com/categories/%E4%B8%AA%E4%BA%BA/"}],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://www.rgzzplus.com/tags/%E6%9D%82%E8%B0%88/"},{"name":"心路","slug":"心路","permalink":"https://www.rgzzplus.com/tags/%E5%BF%83%E8%B7%AF/"}]},{"title":"C++ 教程","slug":"C","date":"2022-03-10T08:32:34.000Z","updated":"2022-03-11T11:17:22.066Z","comments":true,"path":"2022/03/10/C/","link":"","permalink":"https://www.rgzzplus.com/2022/03/10/C/","excerpt":"","text":"符号 using namespace std; 这条指令是一个全新的概念：名字空间 所有标识符都在一个特殊的名字空间 std 中来定义，用以区分不同的命名版本 cout &lt;&lt; 有此指令 std::cout &lt;&lt; 无此指令 让程序访问名称空间 std 的方法 将指令放在函数定义前，让文件中所有函数都能使用名称空间std中所有元素 将指令放在特定的函数定义中，让该函数能够使用名称空间std中所有元素 在特定的函数中使用类似 using std::cout; 这样编译指令，让该函数使用指定的元素，如 cout 完全不使用编译指令 using ，而在需要使用名称空间std中的元素时，使用前缀 std:: cout 全名 console out ，cout 是一个输出流对象 &lt;&lt; 名称：插入运算符 在 c 中是左移操作符 在 c++ 中它有另一个特点：支持重载。 重载，即同一个运算符将有不同的含义。编译器通过上下文来确定运算符的含义。 cin 流对象，从用户终端读取数据 &gt;&gt; 输入操作符又称提取符，它一次从输入流对象 cin 提取一个元素 如果用户不进行键盘输入，则程序会阻塞。 const 限定符 作用：只要一个变量前面用 const 来修饰，该变量里的数据可以被访问，不能被修改，也就是只读。const 与 宏定义（define）效果差不多 只要一个变量前面用 const 来修饰，该变量里的数据可以被访问，不能被修改，也就是只读。const 与 宏定义（define）效果差不多 规则：const 离谁近，谁就不能被修改；比较复杂时，从右往左读 const 修饰一个变量，一定要给这个变量初始化值，若不初始化，后面就无法初始化。 const type name = value； &lt;!--code￼0--&gt; //下面给出正确的赋值方法: 12345678#include &lt;iostream&gt;using namespace std;int main()&#123; const double pi=3.141592; //圆周率的值用pi表示 cout&lt;&lt;&quot;圆周率的近似值是&quot;&lt;&lt;pi&lt;&lt;endl; return 0;&#125; 与 define 相比 可以明确指定类型 可以使用作用域规则将定义限制在特定的函数或文件中 可以将 const 用于更复杂的类型 endl 名称：控制符。作用：重起一行。光标将被移到下一行开头。 \\n 也可以用，不过，使用它不能保证程序继续运行前将其立即显示在屏幕上 = 名称：赋值运算符，在 c 和 c++ 中可以连续使用，如 a=b=c=1 {} 大括号初始化器，使用它初始化时，可以使用等号（=），也可以不使用 int emus&#123;7&#125;; &lt;!--code￼2--&gt; 大括号中可以不包含任何东西，变量将被初始化为0； int rocs=&#123;&#125;； &lt;!--code￼3--&gt; ： 1、类构造函数 (Constructor) 的初始化列表 在构造函数后面紧跟着冒号加初始化列表，各初始化变量之间以逗号 (,) 隔开。下面举个例子。 123456789101112131415161718192021class myClass&#123;public :myClass();// 构造函数，无返回类型，可以有参数列表，这里省去~myClass();// 析构函数int a;const int b;&#125;myClass::myClass():a(1),b(1)// 初始化列表&#123;&#125; 上面的例子展示了冒号的这个用法，下面对这个用法进行几点说明： 1)初始化列表的作用相当于在构造函数内进行相应成员变量的赋值，但两者是有差别的。 在初始化列表中是对变量进行初始化，而在构造函数内是进行赋值操作。两都的差别在对于像const类型数据的操作上表现得尤为明显。我们知道，const类型的变量必须在定义时进行初始化，而不能对const型的变量进行赋值，因此const类型的成员变量只能（而且必须）在初始化列表中进行初始化，即下面的代码将会出错： 123456789myClass::myClass（）&#123;a = 1;// 没错，效果相当于在初始化列表中进行初始化b = 1;// 出错，const变量不能进行赋值操作；&#125; 2）初始化的顺序与成员变量声名的顺序相同。 先看一下下面的程序： 12345myClass::myClass():b(1),a(b)&#123;&#125; 这样的执行结果a,b各是多少呢？b=1,a=1?不是，b=1而a是个随机数。这一点是相当重要的哦，一般在初始化列表中进行初始化时，初始化的顺序应与声明的顺序保持一致，防止出现不必要的错误。 3）对于继承的类来说，在初始化列表中也可以进行基类的初始化，初始化的顺序是先基类初始化，然后再根据该类自己的变量的声明顺序进行初始化。 2、声明基类。 假设我们重新定义一个类，继承自myClass类。定义方式如下： 1234567class derivedClass : public myClass&#123;// 略去&#125; 这里的冒号起到的就是声名基类的作用，在基类类名前面可以加 public\\private\\protected 等标签，用于标识继承的类型，也可以省略，省略的话，用 class 定义的类默认为 private ，用 struct 定义的类默认为 public ，至于具体各个标签有什么区别这里就不说了。 与初始化列表一样的，这里也可以声名多个基类，各基类之间用逗号(,)隔开。 其它字符 \\n 换行符 \\t 水平制表符 \\v 垂直制表符 \\b 退格 \\r 回车 \\a 振铃 \\ 反斜杠 \\ C++基本语法 函数 cin cin.peek();就是返回输入流里面的第一个字符，但是不会像 get 那样取出来 cin.get(数组名，长度，结束符);会提取出输入的第一个字符 cin.ignore(长度，结束符); 从输入流（cin）中提取字符，提取的字符被忽略（ignore），不被使用的 cin.getline(数组名，长度，结束符);提取一行 cin.read(buf,20);把数据读入数据流中 cin.clear(); 清理错误表示符 cout cout.precision();精度 cout.width();长度 cint(小数);将此小数四舍五入 其它方法： 12int x=2.6;int i=(int)(x+0.5); 文件 in，out getc() 函数一次从输入流（stdin）读取一个字符，返回值是int类型。 putc()函数把这个字符写入到输出流（stdout） EOF 宏定义 end of file 一般是文件的结尾，值为 -1 open() 指针 概念：地址是计算机内存中的某个位置，指针是专门用来存放地址的特殊类型变量 形式：type *pointerName; 允许void类型指针 内存：程序在硬盘上以文件的形式存在，但它们的运行在计算机的内存中发生的 对齐：变量类型是根据它们的自然边界进行对齐的。不同操作系统对齐字节不同 文件对齐，内存对齐 程序在编译链接后会被分割成一个一个的区块，而区块在文件和内存中要按照一定的规律来对齐 寻址 通过变量名 通过变量地址 变量的地址在程序执行期间是不会发生变化的 不过，同一个程序不同时间加载到内存中，同一个变量的地址是会改变的 ’&amp;‘ 取址操作符，给变量取别名 123int var = 123;std::cout &lt;&lt;&quot;Address is :&quot; &lt;&lt;&amp;var; 可以把地址赋值给一种称为指针的特殊变量 指针类型必与由它保存其地址的变量的类型一致 ’*‘ 解引用符 c++ 允许指针群 p ，就是多个指针有同样的值 123int*p1=&amp;myInt;int*p2=&amp;myInt; c++支持无类型（void）指针，就是没有被声明为某种特定类型的指针 void*vPointer; reinterpret_cast&lt;type&gt; (expr): reinterpret_cast 运算符把某种指针改为其他类型的指针。它可以把一个指针转换为一个整数，也可以把一个整数转换为一个指针。 数组的名字同时也是一个指向其第一个元素（基地址）的指针。 传值，传址和传引用 在默认情况下，参数只能以值传递的方式给函数 被传递到函数的只是 { 变量的值 }，永远不会是变量本身 如何绕开“传值”？ 传地址 向函数 { 传递变量的地址 } 取代它的值 想要 { 获取某个变量的地址 } 只需要在它前面加“取址符”【&amp;】 注意：如果传的是地址，在函数中必须要通过【*】对指针进行解引用 引用传递 声明时：swap(int &amp;x，int &amp;y); 用函数时：swap(num1，num2); 反汇编 结构 定义结构的语法 12345struct name&#123; type varName1; type varName2;&#125;; 用 “ . &quot; 对结构成员进行赋值 结构与指针 例子 123456789101112struct FishOil&#123; std::string name; std::string id; char sex; //F==Female,M=Male&#125;；//创建一个 FishOil 类型的变量FishOil Jiayu=&#123;&quot;小甲鱼”,&quot;fishc_00000&quot;,&#x27;M&#x27;&#125;//创建一个指向该结构的指针FishOil *pJiayu=&amp;Jiayu;/*注意：因为指针的类型必须与指向的地址的变量的类型一致，所以pJiayu指针的类型也是FishOil */ 通过指针访问结构成员 对指针进行解引用来访问相应的变量值 (*pJiayu).name=&quot;黑夜&quot;; (*pJiayu).id=&quot;fishc_00001&quot;; 用箭头 pJiayu-&gt;name=&quot;黑夜&quot;; pJiayu-&gt;id=&quot;fishc_00001&quot;; 区分&quot;.“与”-&gt;&quot; 把(*pJiayu)当作结构变量时用&quot;.&quot; 把 pJiayu 当作指针时用&quot;-&gt;&quot; 联合，枚举和类型别名 联合（union) 123456789101112union mima&#123; unsigned long birthday; unsigned short ssn; char* pet;&#125;;//创建该类型的变量mima mima_1;//赋值mima_1.birthday=20010101；mima_1.pet=&quot;Chaozai&quot;;//这个联合将把“Chaozai&quot;存入mima_1联合的pet成员，并丢弃birthday成员里的值 联合也可以容纳多种不同类型的值，但是它每次只能存储这些值中的某一个 枚举(enum) 123456//用枚举来创建一个可取值列表enum weekdays&#123; Monday,Tuesday,Wednesday,Thursday,Friday&#125;;//创建变量weekdays today;//赋值today = Thursday; 注意：不用引号，因为枚举值不是字符串 编译器会按照枚举值在定义时出现的先后顺序把它们与0~n-1的整数（n是枚举值的总个数）分别关联起来 优点 它们可以限制变量的可取值 它们可以用作switch条件语句的case标号 类型别名 typedef int* intPointer; Typedef，为一个类型定义别名 函数指针和指针函数 函数指针：指向函数首地址的指针变量称为函数指针 声明 int (*p)( ); 指针函数：一个函数可以带回一个整型数据的值，字符类型值和实型类型的值，还可以带回指针类型的数据，使其指向某个地址单元 面对对象 类和对象 类和对象基础 类描述了一种数据类型的全部属性（包括可使用它执行的操作），对象是根据这些描述创建的实体。 操作文件的对象 ifstream，（input file stream） ifstream in; in.open(&quot;test.txt&quot;); 等价于 ifstream in(&quot;test.txt&quot;); 默认操作为打开 两个参数 ifstream in(char* filename,int open_mode); filename 文件名称，它是一个字符串 open_mode 打开模式，其值用来定义以怎样的方式打开文件 常见的打开模式 ios::in–打开一个可读取文件 ios::out–打开一个可写入文件 ios::binary–以二进制的形式打开一个文件 ios::app–写入的所有数据将被追加到文件的末尾 ios::trunk–删除文件原来已存在的内容 ios::nocreate–如果要打开的文件并不存在，那么以此参数调用open函数将无法进行 ios::noreplace–如果要打开的文件已存在，试图用open函数打开时将返回一个错误 ios::beg–使得文件指针指向文件头 ios::end–使得文件指针指向文件尾 并行操作OR符号 “ | ” ofstream,（output file stream） ofstream in; out.open(&quot;text.txt&quot;); 等价于 ofstream in(&quot;test.txt&quot;); 区分类和结构 对象内部可以有变量和函数 结构通常只由各种变量构成 声明一个类 1234567891011121314151617class Car&#123; public: std::string color; std::string engine; float gas_tank; unsigned int Wheel;void fill_tank(float liter);//方法的声明&#125;;//方法的定义通常安排在类声明的后面void Car::fill_tank(float liter)&#123; gas_tank +=liter;&#125; 注意：类名的第一个字母大写是一种习惯上的标准，但不是硬性规定，在类声明末尾必须有一个分号【;】 类由变量和函数组成，对象将使用那些变量来存储信息，调用那些函数来完成操作 类里的变量成为属性，函数成为方法 作用域解析操作符【::】，作用是告诉编译器这个方法存在于何处，或者说属于哪一个类 定义构造器——类的构造函数 面向对象的编程技术开发程序最基本步骤 定义一个由属性和方法的类（模板） 为该类创建一个变量（实现） 区别 构造器的名字必须和它所在的类的名字一样 系统在创建某个类的实例时会第一时间自动调用这个类的构造器 构造器永远不会返回任何值，并且构造函数没有声明类型 创建构造器，需要先把它的声明添加到类里： 1234567891011class Car&#123; Car(void);&#125;//注意大小写与类名保持一致。在结束声明之后开始定义构造器本身Car::Car(void) //不用写void Car::Car(void)&#123; color = &quot;WHITE&quot;; engine = &quot;V8&quot;; wheel = 4; gas_tank = FULL_GAS;&#125; 构造对象数组：数组可以是任何一种数据类型 1234Car mycar[10];//调用语法mycar[x].running;//注：x代表着给定数组元素的下标 每个类至少有一个构造器，如果你没有在类里定义一个构造器，编译器就会替你定义一个没有代码内容的空构造器：ClassName::ClassName()&#123;&#125; 除此之外编译器还会替你创建一个副本构造器。 定义析构器——类的析构函数 析构器：在销毁一个对象时，系统会调用析构器来达到效果 12345class Car&#123; Car(void); ~Car();&#125; 构造器用来完成事先的初始化和准备工作（申请分配内存），析构器用来完成事后所需的清理工作（清理内存） 特点 析构器也永远不返回任何值 析构器不带任何参数，格式：~ClassName(); 在复杂的类里，析构器往往至关重要（可能引起内存泄漏） 副本构造器 可以把一个对象赋值给一个类型与之相同的变量 编译器将生成必要的代码把“源”对象各属性的值分别赋值给“目标”对象的对应成员。这种赋值行为叫逐位复制 问题：源对象的成员变量是指针，对象成员进行逐位复制的结果是你将拥有两个一摸一样的实例，而这两个副本里的同名指针会指向相同的地址。当删除其中一个对象时，它包含的指针也将被删除，但万一此时另一个副本（对象）还在引用这个指针，就会出现问题！ 1234//例1MyClass obj1;MyClass obj2;obj2=obj1; 解决思路：重载操作符 重载“=“操作符，在其中对指针进行处理 语法：MyClass &amp;operator = (const Myclass &amp;rhs);//这个方法预期的输入参数是一个MyClass类型的、不可改变的引用 因为这里使用的参数是一个引用，所以编译器在传递输入参数时就不会再为它创建另外一个副本（否则可能导致无限递归） 返回一个引用，该引用指向一个MyClass类的对象，这样做的好处时方便我们把一组赋值语句串联起来，如a=b=c； 例2 MyClass obj1; MyClass obj2=obj1; &lt;!--code￼20--&gt; 在程序中，调用其函数时，该函数在编译时被替代，而不像一般函数那样是在运行时被调用 类模板和函数模板的创建过程几乎没什么区别 把相关代码放在一起，这条规则同样适用于类模板 不管是什么模板，编译器都必须看到全部的代码才能为一种给定的类型创建出一个新的实现来 在创建类模板时，避免类声明和类定义相分离的一个好办法是使用内联方法 在类里，内联方法的基本含义是在声明该方法的同时还对它进行定义 语法 使用内联模板的好处：让程序员少打字并让源代码的可读性变得更好 使用Stack模板前，一定要给它添加一个副本构造器和一个赋值操作符重载 因为代码缺少错误处理功能，例如在栈满时调用 push() 方法，或者在栈为空的时候调用 pop() 方法，会导致程序运行出错 在C++里可以使用多个类型占位符，如果类模板需要一种以上的类型，根据具体情况多使用几个占位符即可 this指针 this指针是类的一个自动生成、自动隐藏的私有成员，它存在于类的非静态成员函数中，指向被调用函数所在对象的地址 例子 1234567class Human&#123; char fishc; Human(char fishc);&#125;;Human::Human(char fishc)&#123; fishc = fishc;&#125;; this指向当前类的属性 改为this-&gt;fishc = fishc; //左边为当前对象的fishc属性，右边为构造器的传入来的fishc参数 注意：使用this指针的基本原则，如果代码不存在二义性，就不用this指针 静态属性和静态方法 面对对象编程技术的一个重要特征是用一个对象把数据和对数据处理的方法封装在一起 如果我们所需的功能或数据不属于某个特征的对象，而是属于整个类的，该怎么办？ c++允许我们把一个或多个成员声明为属于某个类，而不是仅属于该类的对象。 好处 程序员可以在没有创建任何对象的情况下调用有关的方法 能够让有关的数据仍在该类的所有对象间共享 创建一个静态属性和静态方法： 只需要在它的声明前加上static保留字即可 static 隐藏：static作为函数的前缀时，可以对其它源文件隐藏该函数 保持变量内容持久：存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也就是唯一的一次初始化。共有两种变量存储在静态存储区：全局变量和static变量，与全局变量比起来，static可以控制变量的可见范围，说起来还是隐藏 默认初始化为0，全局变量和static定义的变量都有这个作用 静态方法与this指针的关系 this指针是类的一个自动生成、自动隐藏的私有成员，它存在于类的非静态成员函数中，指向被调用函数所在对象的地址 在任何一个方法里都可以使用this指针。从本质上讲，c++ 中的对象其实是一种特殊的结构–出了变量，还包含着一些函数的特殊结构 在程序运行时，对象的属性（变量）和方法（函数）都是保存在内存里，这就意味着它们各自都有与之箱关联的地址 这些地址都可以通过指针来访问，而this指针时保存着对象本身的地址 因为静态方法不是属于某个特定的对象，而是由全体对象共享的，这就意味着它们无法访问this指针。所以，我们才无法在静态方法里访问非静态的类成员 在使用静态属性时，不要忘记为它们分配内存。只要在类声明的外部对静态属性做出声明（就像声明一个变量一样） 调用：ClassName::methodName(); 继承 类的继承 运用：可以创建一个类的堆叠层次结构，每个子类均将继承它的积累里定义的方法和属性。简单说，通过继承机制，可以对现有的代码进行扩展，并应用在新的程序中 基类：可以派生出其它的类，也称为父类或超类。 子类：子类是从基类派生出来的类。 方法-&gt;动作，属性-&gt;状态 例子 class SubClass:public SuperClass&#123;...&#125; class Pig:public Animal&#123;...&#125; 继承机制中的构造器和解析器 构造器带着输入参数 1234567891011121314151617//声明class Animal&#123;public: Animal(std::string theName); std::string name;&#125;class Pig:public Animal&#123;public: Pig(std::string theName);&#125;//方法定义Animal::Animal(std::string theName)&#123; name = theName;&#125;Pig::Pig(std::string theName):Animal(theName)&#123;&#125; 子类的构造器定义里的:Animal(theName)语法含义是： 当调用Pig（）构造器时（以 theName 作为输入参数），Animal（）构造器也将被调用（theName 输入参数将传递给它） 当我们调用Pig pig(“小猪猪”);将把字符串&quot;小猪猪&quot;传递给Pig()和Animal()，赋值动作将实际发生在Animal（）方法里 基类的构造器在使用子类构造器之前被调用 与基类构造器相反，基类的析构器将在子类的最后一条语句执行完毕后才被调用。 注意 初学者常犯的一个错误是用一个毫不相干的类去派生另一个毫不相干的子类 基本原则：基类和子类之间的关系应该自然和清晰 构造器的设计越简明越好！我们应该只用它来初始化各种有关的属性 基本原则：在设计、定义和使用一个类的时候，应该让它的每个组成部分简单到不能再简单 析构器的基本用途是对前面所做的事情进行清理 关于从基类继承来的方法和属性的保护：-class Pig : public Animal {…} c++不仅允许对类里定义的方法和属性实施访问控制，还允许控制子类可以访问基类里的哪些方法和属性 public 是在告诉编译器：继承的方法和属性的访问级别不发生变化——即public仍可以被所有代码访问，protected只能由基类的子类访问，private只能由基类本身访问 protected 把基类的访问级别改为protected，如果原来是public的话，这将使得这个子类外部的代码无法通过子类去访问基类中的public private 是在告诉编译器从基类继承来的每一个成员都当成private来对待，这意味着只有这个子类可以使用它从基类继承来的元素 覆盖方法 例如当我们需要在基类里提供一个通用的函数，但在它的某个子类里需要修改这个方法的实现，在c++中，覆盖（overriding）就可以做到 语法：在子类中声明并定义一个与基类中同名的成员 重载方法 重载机制使你可以定义多个同名的方法（函数），只是它们的输入参数必须不同 注意： 对方法（函数）进行重载一定要有的放矢，重载的方法（函数）越多，程序就越不容易看懂 在对方法进行覆盖（注意区分覆盖和重载）时一定要看仔细，因为只要声明的输入参数和返回值与原来不一致，你编写出来的就将是一个重载方法而不是覆盖方法。而且这种错误往往很难调试 对从基类继承来的方法进行重载，程序永远不会像你预期的那样工作 重载 函数的重载 定义：使用同样的函数名，定义一个有着不同参数，但有着同样用途的函数。可以时参数个数的不同，也可以是参数数据类型的不同 注意 对函数（方法）进行重载一定要谨慎 重载越多，程序越不容易看懂 注意区分重载和覆盖 我们只能通过不同参数进行重载，但不能通过不同的返回值重载（尽管后者也是一种区别 重载的目的：方便对不同数据类型进行同样的处理 运算符重载 运算符重载的方法是定义一个重载运算符的函数，在需要执行被重载的运算符时，系统就会自动调用该函数，以实现相应的算法 运算符重载是通过定义函数实现的，运算符重载实际上是函数的重载 重载规则 c不允许用户自己定义新的运算符，只能对已有的c运算符进行重载 除了一下五个运算符不允许重载外，其它运算符允许重载 【.】成员访问运算符 【.*】成员指针访问运算符 【::】域运算符 【sizeof】尺寸运算符 【?:】条件运算符 重载不能改变运算符运算对象（操作数）个数 重载不能改变运算符的优先级别 重载不能改变运算符的结合性 重载运算符的函数不能有默认的参数 重载的运算符必须和用户定义的自定义类型的对象一起使用，其参数至少应该有一个是类对象或类对象的引用。（也就是说，参数不能全部是c++标准类型，这样约定是为了防止用户修改用于标准类型结构的运算符性质） 运算符重载函数作为类友元函数 目的：为了访问类的私有成员 由于友元的使用会破坏类的封装，因此从原则上说，要尽量将运算符作为成员函数 重载运算符目的：让代码更容易阅读和理解 重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。Box operator+(const Box&amp;); 重载&lt;&lt;操作符 &lt;&lt; 插入器 operator&lt;&lt;()函数的原型 std::ostream&amp;operator&lt;&lt;(std::ostream&amp; os , Rational f ); 第一个输入参数os是将要向他写数据的那个流，它是以“引用传递”方式传递的 第二个输入参数是打算写道那个流里的数据值，不同的operator&lt;&lt;()重载函数就是因为这个输入参数才相互区别的 返回类型是ostream流的引用。一般来说，在调用operator&lt;&lt;()重载函数时传递给它的是哪一个流，它返回的就应该是那个流的一个引用 多继承（multiple inheritance) 什么时候用多继承？ 遇到的问题无法只用一个”是一个“关系描述的时候，就要用多继承 基本语法：class TeachingStudent : public Student,public Teacher&#123;...&#125; 多态 多态性 多态性：指用一个名字定义不同的函数，调用同一个名字的函数，却执行不同的操作，从而实现“一个接口，多种方法” 多态是如何实现绑定的？ 编译时的多态性：通过重载实现 编译时多态的特点是运行速度快 运行时的多态：通过虚函数实现 运行时多态的特点是高度灵活和抽象 虚方法(虚函数) 指针（以前的做法）：创建一个变量，再把这个变量的地址赋值给一个指针。 问题：使用指向对象的指针 直接创建一个指针并让它指向新分配的内存块 1234int *pointer = new int;*pointer= 110;std :: cout &lt;&lt; *pointer;delete pointer; 虚函数声明：只要在其原型前加上 virtual 保留字即可【virtual void play();】 虚函数：在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。 我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为动态链接，或后期绑定。 注意：虚方法是继承的，一旦在基类里把某个方法声明为虚方法，在子类里就不可能再把它声明为一个虚方法了 技巧 如果拿不准要不要把某个方法声明为虚方法，那么就把它声明为虚方法 在基类里把所有的方法都声明为虚方法会让最终生成的可执行代码的速度慢一些，但好处是可以一劳永逸地确保程序的行为符合你的预期 在实现一个多层次的类继承关系的时候，最顶级的基类应该只有虚方法 析构器都是虚方法是为了当一个基类的指针删除一个派生类的对象时，派生类的析构函数可以被正确调用 当类里有虚函数的时候，编译器会给类添加一个虚函数表，里面存放着虚函数指针。为了节省资源，只有当一个类被用来作为基类的时候，我们才把析构函数写成虚函数 虚继承（virtual inheritance） 通过虚继承某个基类，就是在告诉编译器：从当前这个类再派生出来的子类只能拥有那个基类的一个实例 虚继承语法：class Teacher:virtual public Person&#123;...&#125; 抽象方法 抽象方法：把某个方法声明为一个抽象方法等于告诉编译器，这个方法必不可少，但我现在（在这个基类里）还不能为它提供一个实现 纯虚函数：【virtual void funtion1()=0;】 纯虚函数一定没有定义，纯虚函数用来规范派生类的行为，即接口。包含纯虚函数的类是抽象类，抽象类不能定义实例，但可以声明指向实现该抽象类的具体类的指针或引用。 C++高级教程 链接和作用域 链接，当同时编译多个文件时： g++ -o test main.cpp rational.cpp 每个源文件都被称为一个翻译单元（translation unit），在某一个翻译单元里定义的东西在另一个翻译单元里使用正是链接发挥作用的地方 存储类（storage class） 每个变量都有一个存储类，它决定着程序将把变量的值存储在计算上的哪个地方、如何存储，以及变量应该有着怎样的作用域 分类 默认的存储类是auto（自动） 自动变量储存称为栈（stack）的临时内存里并有着最小的作用域，当程序执行到语句块或函数末尾的有花括号时，它门将被系统回收（栈回收），不复存在 static 变量在程序的生命期内将一直保有它的值不会消亡，存储在静态存储区，生命周期为从申请到程序退出（和全局变量一样） 一个static 变量可以有external或internal链接 extern 它在有多个翻译单元时非常重要。它用来把另一个翻译单元里的某个变量声明为本翻译单元里的一个同名全局变量 编译器不会为extern变量分配内存，因为它在其它的地方已经分配过内存 register 它要求编译器把一个变量存储在CPU的寄存器里，但有着与自动变量相同的作用域 register变量存储速度最快 用编译器建立程序 1、执行预处理器指令 把#include指令替换为相应的头文件里的代码 2、把 .cpp文件编译成 .o文件 把C++代码转换为一个编译目标文件，在这一步骤里，编译器将为文件里的变量分配必要的内存并进行各种错误检查 3、把 .o文件链接成一个可执行文件 如果只有一个C++源文件，步骤三只是增加一些标准库代码和生成一个可执行文件 但当同时编译多个源文件来生成一个可执行文件的时候，在编译好每一个组件之后，编译器还需要把它们链接在一起次才能生成最终的可执行文件 问题：当一个编译好的对象（即翻译单元）引用一个肯能不存在于另一个翻译单元里的东西时，潜在的混乱就开始出现了 链接分三种情况，凡是有名字的东西（函数，类，常量，变量，模板，命名空间）必然属于其中之一：外链接（external），内链接（internal)和无链接（none) 外链接：每个翻译单元都可以访问这个东西（前提时只要它知道这个东西存在）。普通的函数，变量，模板和命名空间都有外链接 内链接：在某个翻译单元里定义的东西只能在翻译单元里使用，在任何函数以外定义的静态变量都有内链接 无链接：在函数里定义的变量只存在于该函数的内部，根本没有任何链接 容器和算法 在C++标准库里面有许多现成的容器，它们都经过了老一辈精心设计和测试，可以直接拿来用 C++标准库提供的向量（vector）类型从根本上解决了数组先天不足的问题 std::vector&lt;type&gt;vectorName; 向量容器：向量可以动态地随着添加元素而无限增大（前提是有足够的可用内存） 可以用它的size（）方法查知向量的当前长度（它包含的元素个数） 用push_back()方法来添加元素 还可以用访问数组元素的语法来访问某个给定向量里的元素 迭代器 遍历向量允许使用下标访问符来访问它的各个元素：nemes[x] 迭代器也可以遍历容器里的各个元素 迭代器是一种功能非常有限却很实用的函数，提供一些基本操作符：*、++、==、!=、= 迭代器是个智能指针，具有遍历复杂数据结构的能力，每种容器都支持 通过使用迭代器，当在程序里改用另一种容器的时候就不用修改那么多代码了 每种容器都必须提供自己的迭代器，事实上每种容器都将其迭代器以嵌套的方式定义于内部 因此各种迭代器的接口相同，型号却不同，这就是所谓泛型程序设计的概念：所有操作行为都使用相同接口，虽然它们的具体实现不同 好处：迭代器可以和所有的容器配合使用，而使用迭代器去访问容器元素的算法可以和任何一种容器配合使用 错误处理及调试 编译时错误 培养并保持一种编程风格 认真对待编译器给出的错误/警告信息 三思而后行 开始写代码前先画流程图 编译错误不要立刻修改源代码，应该先完整地审阅一遍源代码，再开始纠正错误 注意检查最基本地语法 把可能有问题地代码行改为注释 换一个环境或开发工具 检查自己是否已经把所有必要的头文件全部include进来 留意变量的作用域和命名空间 休息一下 使用调试工具 把调试好的代码另外保存起来并不再改动它，然后把代码划分成各个模块，用它们来搭建新的应用程序。 运行时错误 培养并保持一种良好的编程风格 多用注释，用好注释 注意操作符的优先级 不要忘记对用户输入和文件输入进行合法性检查 不要做任何假设 把程序划分成一些比较小的单元模块来测试 让函数返回错误代码 创建一些测试函数：专门测试某种条件并根据测试结果返回一个代码来表示当前函数的执行状态 climits头文件把每种数据类型的最大值和最小值都分别定义为一个常量供我们比较 ，SHORT_MAX assert函数 专门为调试准备的工具函数，被包含在C语言的assert.h库文件内，包含到C++里用#include assert()函数需要有一个参数，它将测试这个输入参数的真or假状态 assert()可以用在某个程序里的关键假设不成立时立即停止该程序的执行并报错 除了assert（）函数，还可以用cout语句来报告在程序里正在发生的事情 原则：最终用户看到的错误信息应该既专业有清晰，不能轻易中断程序，不能充满技术细节 捕获异常 异常（exception）就是与预期不相符的反常现象 基本使用思路 1.安排一些C++代码（try 语句）去尝试某件事，尤其是那些可能会失败的事 2.如果发生问题，就抛出一个异常（throw语句） 3.在安排一些代码（catch语句）去捕获这个异常并进行相应的处理 基本语法 123456789try&#123; //Do something. //Throw an exception on error.&#125;catch&#123; //Do whatever.&#125; 注意：每条try语句至少要有一条配对的catch语句，必须定义catch语句以便让它接收一个特定类型的参数 C++还允许我们定义多条catch语句，让每条catch语句分别对应着一种可能的异常 catch(int e)&#123;...&#125; catch(bool e)&#123;...&#125; catch(...)&#123;...&#125; 最后一条catch语句可以捕获任何类型的异常 在程序里，我们可以用throw保留字来抛出一个异常：throw1； 在某个try语句块里执行过throw语句，它后面的所有语句（截止到这个try语句块末尾）将永远不会被执行 与使用一个条件语句或return语句相比，采用异常处理机制的好处是它可以把程序的正常功能与逻辑与出错处理部分清晰地划分开来而不是让他们混在一起 定义一个函数时可以明确地表明你想让它抛出哪种类型地异常 type functionName(arguments)throw(type) 如果没有使用这种语法来定义函数，就意味着函数可以抛出任意类型的异常 TIPS 使用异常的基本原则：应该只用它们来处理确实可能不整常的情况 在构造器和析构器里不应该使用异常 如果try语句块无法找到一个与之匹配的 catch 语句块，它抛出的异常将中止程序的执行 在C++标准库里有个名为 exception 的文件，该文件声明了一个 exception 的基类，可以用这个基类来创建个人的子类以管理异常 如此抛出和捕获的是 exception 类或其子类的对象 如果你打算使用对象作为异常，请记住这样一个原则：以“值传递”方式抛出对象，以“引用传递”方式捕获对象 动态内存 动态内存管理 动态内存支持创建和使用种种能够根据具体需要扩大和缩小的数据结构，它们只受限于计算机硬件的内存总量和系统特殊约束 静态内存：变量（包括指针变量）、固定长度的数组、某给定的对象，指内存块的长度在程序编译时被设定为一个固定的值，而这个值无法改变 动态内存是由一些没有名字、只有地址的内存块构成，那些内存块是在【程序运行期间】动态分配的 new int *i = new int; delete i; i = NULL; 从内存池申请一些内存需要用new语句，它将根据你提供的数据类型分配一块大小适当的内存 申请成功，new语句将返回新分配地址块的起始地址 申请失败，new语句将抛出 std::bad_alloc 异常 注意在使用完内存块后，应用 delete语句 把它还给内存池。另外作为一种附加的保险措施，在释放了内存块之后还应该把与之关联的指针设置为 NULL NULL 指针 当把一个指针变量设置为 NULL 时，它的含义是那个指针将不再指向任何东西 new 语句返回的内存块很可能充满“垃圾“数据，所以我们通常先往里面鞋一些东西覆盖，再访问它们，或者在类直接写一个构造器来初始化 原则：每条 new 语句都必须与之配对的 delete语句，没有或者有两个 delete语句都属于编程漏洞 为对象分配内存 为对象分配内存和为各种基本数据类型（int，char，float）分配内存在做法上完全一样 用new向内存池申请内存 用delete来释放内存 注意 把方法声明为虚方法 在重新使用某个指针之前要调用delete语句，如果不这样做，那个指针将得到一个新内存块的地址，而程序将永远也无法释放原先那个内存块，应为它的地址已经被覆盖掉了 delete语句只释放给定指针变量正指向的内存块，不影响这个指针。在执行delete语句之后，那个内存块被释放了，但指针变量还依然健在 动态数组 数组名和下标操作符[ ]的组合可以被替换成一个指向该数组的基地址的指针和对应的指针运算 建立一个动态数组 把一个数组声明传递给 new 语句将使它返回一个该数组基类型的指针 把数组下标操作符和该指针变量的名字搭配使用就可以像对待一个数组那样使用new语句为这个数组那样使用 new 语句为这个数组分配的内存块 删除一个动态数组 用来保存数组地址的变量只是一个简单的指针，所以需要明确地告诉编译器它应该删除一个数组 做法：在delete保留字地后面加上一对方括号：delete[]x; 从函数或方法返回内存 动态内存的另一个常见用途是让函数申请并返回一个指向内存块地指针 基本思路 在函数里调用 new 语句为某种对象或某种基本数据类型分配一块内存，再把那块内存的地址返回给程序的主代码，主代码将使用那块内存并再完成有关操作后立刻释放 变量作用域的概念：函数或方法有它们自己的变量，这些变量只能在这个函数的内部使用，这些变量我们称为局部变量（local variable） 为什么不应该让函数返回一个指向局部变量的指针？ 任何一个函数都不应该把它自己的局部变量则指针作为它的返回值，因为局部变量在栈里，函数结束自动会释放 如果你想让一个函数在不会留下任何隐患的情况下返回一个指针，那它只能是一个动态分配的内存块的基地址 避免内存泄露 编程漏洞被称为内存泄漏（memory leak） new语句所返回的地址时访问这个内存块的唯一线索，同时也是delete语用来把这个内存块归还给内存池的唯一线索 情况一：new的地址值丢失了 12345int *x;x=new int [3000];x=new int [4000];delete[]x;x=NULL; 情况二：用来保存内存块地址的指针变量作用域的问题 12345void foo()&#123; My Class *x; x = new MyClass();&#125; 解决一：在函数返回（结束）前delete x; 解决二：让函数返回内存块的地址 内存作用域 变量都有一个作用域：规定了它们可以在程序的哪些部分使用 全局作用域：把变量定义在函数的外部，它可以整个程序的所有函数里使用 动态内存，没有作用域，一旦被分配，内存块可以在程序的任何地方使用 需要跟踪它们的使用情况，并在不需要用到它们时把它们及时归还给系统 但是用来保存其地址的指针变量是受作用域的影响 命名空间和模块化编程 模块化（modularizat） 把程序划分为多个组成部分 通过把程序代码分散到多个文件里，等编译程序时再把那些文件重新组合在一起实现的 命名空间（namespace） 头文件 借助C++的预编译和编译器的能力，把一个复杂的应用程序划分成多个不同文件，而仍保持它在类和功能上的完整 头文件的基本用途是提供必要的函数声明和类声明 系统头文件：定义系统级功能，要使用这些功能就必须要把相应的头文件包含过来 自定义头文件 #include&quot;fishc.h&quot; 头文件是一些以.h作为扩展名的标准文本文件，一般情况下，都应该把自定义的头文件和其余的程序文件放在同一个子目录里，或者在主程序目录下专门创建一个子文件夹来集中存放它们 用头文件来保存程序的任何一段代码，如函数或类的声明，但一定不要用头文件来保存它的定义（实现） 头文件里应该注释说明：创建日期，文件用途，创建者姓名，最后一次修改日期，有什么限制，前提条件。另外头文件里的每一个类和函数也应该有说明 提示 头文件经典的做法是只保存函数声明、用户自定义类型数据（结构和类）、模板和全局性的常量 头文件应该只包含最必要的代码，比如只声明一个类或只包含一组彼此相关的函数 使用 在创建了头文件后，用双引号引用文件名 #include&quot;fishc.h&quot; 如果没有给出路径名，编译器将到当前子目录以及当前开发环境中的其他逻辑子目录里去寻找头文件 导入头文件可以用相对路径 #include&quot;./fishc.h&quot; 如果头文件位于某个下级子目录里，那么以下级子目录的名字开头 #include &quot;includes/fishc.h&quot; 如果头文件位于某个与当前子目录平行的”兄弟“子目录里 #include &quot;../includes/fishc.h&quot; 创建实现文件 代码模块化规则：接口（函数的原型）和实现（函数体的定义）分开 头文件的重要性不仅体现在它们可以告诉编译器某个类、结构或函数将有怎样的行为，还体现在它们可以把这些消息告诉给程序员。 C++预处理器 #if —如果表达式为真，执行代码 #else —如果前面的 #if 表达式为假，执行代码 #elif —相当于”elseif“ #endif —用来标志一个条件指令的结束 #ifdef —如果本指令所引用的定义已存在，执行代码 #ifndef —如果本指令所引用的定义不存在，执行代码 格式 #if //代码 #endif #ifndef LOVE_FISHC #define LOVE_FISHC #endif 如果 LOVE_FISHC 还没有定义则定义它 命名空间 创建的每一个类、函数和变量都只能在一定的区域内使用 最大的区域是全局作用域，最小的区域是一个代码块 命名空间就是由用户定义的范围，同一个命名空间里的东西只要在这个命名空间有独一无二的名字就行 创建命名空间 12345namespace myNamespace&#123; //全部东西&#125;//注意在最末尾不需要加分号 如果某个东西在命名空间里定义的，程序将不能立刻使用它 意义：把东西放在它们自己的小盒子里，不让他们域可能有着相同名字的其它东西发生冲突 使用命名空间方法 方法一：std::cout&lt;&lt; 方法二：using namespace std; cout&lt;&lt;&quot;&quot;; 方法三：using std::cout; cout&lt;&lt;&quot;&quot;; 注意：using 指令的出现位置决定着从命名空间里提取出来的东西能在哪个作用域内使用 如果 using 放在所有函数前面，它将拥有全局性，如果你把它放在某个函数里，那它将旨在这一个函数里使用 模板 函数模板 模板可以没有任何类型：它们可以处理的数据并不仅限于某种特定的数据类型 当程序需要用到这些函数中的某一个时，编译器将根据即时生成一个能够对特定数据类型进行处理的代码版本 泛型编程技术可以让程序员用一个解决方案解决多个问题 STL库 定义函数模板 12345template&lt;class T&gt;void foo(T param)&#123;//do something&#125; 第一行代码里，在尖括号里有一个class T，用来告诉编译器：字母T将在接下来的函数里代表一种不确定的数据类型 关键字class并不意味着这个是类，只是一种约定俗成的写法 在告诉计算机 T 是一种类型之后，就可以像对待一种普通数据类型那样使用它了 注意： 创建模板时，还可以用template&lt;Typename T&gt;来代替 template&lt;class T&gt;,它们的含义是一样的。 不要把函数模板分成原型和实现两个部分 为了明确表明swap()是一个函数模板，还可以使用swap&lt;int&gt;(i1,i2)语法来调用这个函数，它将明确地告诉编译器它应该使用哪一种类型 如果某个函数对所有数据类型都将进行同样地处理，就应该把它编写成一个模板 如果某个函数对不同的数据类型将进行不同的处理，就应该重载 类模板 先编写一个类的模板，再由编译器在你第一次使用这个模板时生成实际代码 语法 123456template&lt;class T&gt;class MyClass&#123; MyClass(); void swap(T &amp;a,T &amp;b);&#125; 构造器实现 MyClass&lt;T&gt;::MyClass() &#123; //初始化操作 &#125; 应为MyClass是一个类模板，所以不能只写出MyClass::MyClass()，编译器需要知道与MyClass()配合使用的数据类型，必须在尖括号里提供它，因为没有确定的数据类型可以提供，所以使用一个T作为占位符即可 高级强制类型转换 传统的强制类型转换：把需要的指针类型放在一对圆括号之间，然后写出将被强制转换的地址值 Company *company = new Company(“APPLE”，“Iphone”); TechCompany *techCompany = company； 注意：不能既删除company，又删除tecCompany。因为强制类型转换操作不会创建一个副本拷贝，它只告诉编译器把有关变量解释为另一种类型组合形式，所以他们指向的是同一个地址 万一被强制转换的类型和目标类型结构完全不同，怎么办？ 强制类型转换操作符 conset_cast&lt;MyClass*&gt;(value) 用来改变value的“常量性” dynamic_cast&lt;MyClass*&gt;(value) 用来把一种类型的对象指针安全地强制转换为另一种类型的对象指针。注意：如果value的类型不是一个MyClass类（或MyClass的子类）的指针，这个操作将返回NULL reinterpret_case&lt;T&gt;(value) 在不进行任何实质性的转换的情况下，把一种类型的指针解释为另一种类型的指针或把一种整数解释为另一种整数 static_case&lt;T&gt;(value) 用来进行强制类型转换而不做任何运行时检查，老式强制类型转换操作的替代品 疑难杂症 用cin输入时如何让不跳过任意地方的空格和换行？ 操作符noskipws会令输入运算符读取空白符，而不是跳过它们。 cin&gt;&gt;noskipws;//设置cin读取空白符 cin&gt;&gt;skipws;//将cin恢复到默认状态，从而丢弃空白符 函数引用传参 &amp;a，a是实参，即传递过来的那个变量。该变 a 其变量也会变 数组 array[6]; swap(int &amp;a,int n); 当a是数组的第一个变量时，可以用*(&amp;a+1)来访问第二个变量 nullptr与NULL C++不允许void*隐式转换成其它类型的指针 #ifdef __cplusplus #define NULL 0 #else #define NULL ((void *)0) #endif 然而这样用NULL代替0表示空指针在函数重载时会出现问题 为解决NULL代指空指针存在的二义性问题，在C++11版本(2011年发布)中特意引入了nullptr这一新的关键字来代指空指针，使用nullptr作为实参。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://www.rgzzplus.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://www.rgzzplus.com/tags/C/"}]},{"title":"typora快捷键","slug":"typora快捷键","date":"2022-03-10T03:23:58.000Z","updated":"2022-03-20T15:15:14.403Z","comments":true,"path":"2022/03/10/typora快捷键/","link":"","permalink":"https://www.rgzzplus.com/2022/03/10/typora%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"","text":"无序列表：输入-之后输入空格 有序列表：输入数字+“.”之后输入空格 任务列表：-[空格]空格 文字 标题：ctrl+数字 表格：ctrl+t 生成目录：[TOC]按回车 选中一整行：ctrl+l 选中单词：ctrl+d 选中相同格式的文字：ctrl+e 跳转到文章开头：ctrl+home 跳转到文章结尾：ctrl+end 搜索：ctrl+f 替换：ctrl+h 引用：输入&gt;之后输入空格 代码块：ctrl+alt+f 加粗：ctrl+b 倾斜：ctrl+i 下划线：ctrl+u 删除线：alt+shift+5 插入图片：直接拖动到指定位置即可或者ctrl+shift+i 插入链接：ctrl+k 最近我发现了一篇超强文章： Typora使用&amp;Markdown基础语法","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://www.rgzzplus.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"typora","slug":"typora","permalink":"https://www.rgzzplus.com/tags/typora/"}]}],"categories":[{"name":"题库/作业","slug":"题库-作业","permalink":"https://www.rgzzplus.com/categories/%E9%A2%98%E5%BA%93-%E4%BD%9C%E4%B8%9A/"},{"name":"工具","slug":"工具","permalink":"https://www.rgzzplus.com/categories/%E5%B7%A5%E5%85%B7/"},{"name":"操作系统","slug":"操作系统","permalink":"https://www.rgzzplus.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"经验交流","slug":"经验交流","permalink":"https://www.rgzzplus.com/categories/%E7%BB%8F%E9%AA%8C%E4%BA%A4%E6%B5%81/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://www.rgzzplus.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"个人","slug":"个人","permalink":"https://www.rgzzplus.com/categories/%E4%B8%AA%E4%BA%BA/"}],"tags":[{"name":"C和指针","slug":"C和指针","permalink":"https://www.rgzzplus.com/tags/C%E5%92%8C%E6%8C%87%E9%92%88/"},{"name":"Git","slug":"Git","permalink":"https://www.rgzzplus.com/tags/Git/"},{"name":"ollydebug","slug":"ollydebug","permalink":"https://www.rgzzplus.com/tags/ollydebug/"},{"name":"task_struct","slug":"task-struct","permalink":"https://www.rgzzplus.com/tags/task-struct/"},{"name":"hexo","slug":"hexo","permalink":"https://www.rgzzplus.com/tags/hexo/"},{"name":"建站","slug":"建站","permalink":"https://www.rgzzplus.com/tags/%E5%BB%BA%E7%AB%99/"},{"name":"Linux","slug":"Linux","permalink":"https://www.rgzzplus.com/tags/Linux/"},{"name":"中国知网","slug":"中国知网","permalink":"https://www.rgzzplus.com/tags/%E4%B8%AD%E5%9B%BD%E7%9F%A5%E7%BD%91/"},{"name":"杂谈","slug":"杂谈","permalink":"https://www.rgzzplus.com/tags/%E6%9D%82%E8%B0%88/"},{"name":"心路","slug":"心路","permalink":"https://www.rgzzplus.com/tags/%E5%BF%83%E8%B7%AF/"},{"name":"C++","slug":"C","permalink":"https://www.rgzzplus.com/tags/C/"},{"name":"typora","slug":"typora","permalink":"https://www.rgzzplus.com/tags/typora/"}]}